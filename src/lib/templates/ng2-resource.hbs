import { Injectable, Inject, InjectionToken } from '@angular/core';
import { {{#resourceDefinition.httpLibraries}}{{this}},{{/resourceDefinition.httpLibraries}} RequestOptionsArgs } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

{{#each resourceDefinition.refs}}
import { {{this}} } from '../models/{{this}}';
{{/each}}

import { ResourceConfig } from '../';

export let {{service.tokenName}}_{{resourceToken}} = new InjectionToken<ResourceConfig>('resource.config');

import { ClientResponse, toClientResponse } from '../utils';

/**
 * {{resourceName}}
 * v{{swagger.version}}
 */
@Injectable()
export class {{resourceName}}{
  basePath: string;
  config: ResourceConfig;

  constructor(private http: Http, @Inject({{service.tokenName}}_{{resourceToken}}) config: ResourceConfig){
    this.basePath = '{{swagger.basePath}}';
    this.config = config;
  }

{{#each resourceDefinition.methods}}
  /**
  * {{operationId}}
  * {{summary}}
  */
  {{operationId}}({{parantheseString}}options: RequestOptionsArgs): Observable<ClientResponse<{{responseTypeString}}>>{
      // endpoint URL {{#if hasPathParameters }} with parameters{{/if}}
      const methodPath = `{{path}}`;

      {{#if has.queryParameters }}
      // query parameters
      const queryParams = new URLSearchParams();
      {{#groupedParameters.query}}
      queryParams.set('{{name}}',{{codeName}});
      {{/groupedParameters.query}}
      {{/if}}

      {{#if has.bodyParameters }}
      // body parameters
      const bodyParams = {
      {{#groupedParameters.body}}
        "{{ name }}": {{codeName}}{{#if @last}}{{else}}, {{/if}}
      {{/groupedParameters.body}}
      };
      {{/if}}

      {{#if has.headersParameter}}
      // headers parameters
      const headers = new Headers();
      {{#groupedParameters.headers}}
      headers.set('{{name}}',{{codeName}});
      {{/groupedParameters.headers}}
      {{/if}}

      {{#if has.bodyParameters}}
      return this.http.{{methodName}}(this.config.host+this.basePath+methodPath, bodyParams, options)
        .map((res:Response) => toClientResponse<{{responseTypeString}}>(res));
      {{else}}
      return this.http.{{methodName}}(this.config.host+this.basePath+methodPath, options)
        .map((res:Response) => toClientResponse<{{responseTypeString}}>(res));
      {{/if}}
  }
{{/each}}
}