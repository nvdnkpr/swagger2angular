import { Injectable, Inject, InjectionToken } from '@angular/core';
import { {{#resourceDefinition.httpLibraries}}{{this}},{{/resourceDefinition.httpLibraries}} RequestOptionsArgs } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

{{#each resourceDefinition.refs}}
import {{this}} from '../models/{{this}}';
{{/each}}

import { ClientResponse, toClientResponse } from '../utils';

export let {{service.tokenName}}_CONFIG = new InjectionToken<{{service.interfaceName}}Config>('{{service.interfaceName}}');

export interface {{service.interfaceName}}Config{
  host: string;
}


/**
 * {{resourceName}}
 *
 */
@Injectable()
class {{resourceName}}{
  config: {{service.interfaceName}}Config;

  constructor(private http: Http, @Inject({{service.tokenName}}_CONFIG) config: {{service.interfaceName}}Config){
    this.config = config;
  }

{{#each resourceDefinition.methods}}
  /**
  * {{operationId}}
  * {{summary}}
  */
  {{operationId}}({{parantheseString}}options: RequestOptionsArgs): Observable<ClientResponse<{{responseTypeString}}>>{
      // endpoint URL {{#if hasPathParameters }} with parameters{{/if}}
      const methodPath = `{{path}}`;

      {{#if has.queryParameters }}
      // query parameters
      const queryParams = new URLSearchParams();
      {{#groupedParameters.query}}
      queryParams.set('{{name}}',{{codeName}});
      {{/groupedParameters.query}}
      {{/if}}

      {{#if has.bodyParameters }}
      // body parameters
      const bodyParams = {
      {{#groupedParameters.body}}
        "{{ name }}": {{codeName}}{{#if @last}}{{else}}, {{/if}}
      {{/groupedParameters.body}}
      };
      {{/if}}

      {{#if has.headersParameter}}
      // headers parameters
      const headers = new Headers();
      {{#groupedParameters.headers}}
      headers.set('{{name}}',{{codeName}});
      {{/groupedParameters.headers}}
      {{/if}}

      {{#if has.bodyParameters}}
      return this.http.{{methodName}}(this.config.host+methodPath, bodyParams, options).map(toClientResponse);
      {{else}}
      return this.http.{{methodName}}(this.config.host+methodPath, options).map(toClientResponse);
      {{/if}}
  }
{{/each}}
}